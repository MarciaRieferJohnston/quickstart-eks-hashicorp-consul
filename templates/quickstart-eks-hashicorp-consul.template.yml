AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys the HashiCorp Consul helm chart into a Kubernetes cluster (qp-1qmcrhdml)."
Metadata:
  QSLint:
    Exclusions: [W9002, W9003, W9004, W9006]
Parameters:
  ClusterName:
    Type: String
    Description: Amazon EKS Cluster
  ConsulVersion:
    Type: String
    Default: "1.8.2"
    AllowedValues: 
    - "1.7.2"
    - "1.8.2"
  ConsulReplicas:
    Type: String
    Default: 3
    AllowedValues:
    - 3
    - 5
    - 7
  KubernetesNameSpace:
    Type: String
    Default: "consulqs"
  HelmDeploymentName:
    Type: String
    Default: "andrewconsul1"
  LoadBalancerType:
    Type: String
    Default: "Internal"
    Description: Specify if the load balancer for HashiCorp Consul is internal or external.
    AllowedValues:
    - "Internal"
    - "External"
  DomainName:
    Type: String
    Description: Fully qualified domain name for the HashiCorp Consul load balancer.
      If you don't provide a value for ACMSSLCertificateArn, use the HostedZoneID.
    MaxLength: 128
    Default: ""
  HostedZoneID:
    Type: String
    Description: Route 53-hosted zone ID of the domain name. If you don't provide an
      ACMSSLCertificateArn value, the Quick Start creates the ACM certificate for you using
      HostedZoneID in conjunction with DomainName.
    Default: ""
  ACMSSLCertificateArn:
    Description: Amazon Resource Name (ARN) of the load balancer's SSL certificate. If you
      don't provide values for DomainName and HostedZoneID, provide a value for
      ACMSSLCertificateArn.
    Type: String
    Default: ""
  QSS3BucketName:
    Type: String
    Default: "aws-quickstart"
  QSS3BucketRegion:
    Type: String
    Default: "us-east-1"
  QSS3KeyPrefix:
    Type: String
    Default: "quickstart-eks-hashicorp-consul/"
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  InternalLoadBalancer: !Equals [!Ref LoadBalancerType, 'Internal']
  CustomDns: !Not [!Equals [!Ref DomainName, ""]]
  HostedZoneExists: !Not [!Equals [!Ref HostedZoneID, ""]]
  CreateDns: !And
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ""
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ""
Resources:
  ConsulNameSpace:
    Type: "AWSQS::Kubernetes::Resource"
    Properties:
      ClusterName: !Ref ClusterName
      Manifest: !Sub
        - |
          kind: Namespace
          apiVersion: v1
          metadata:
            name: ${Namespace}
        - Namespace: !Ref KubernetesNameSpace
  PreworkStack:
    Type: AWS::CloudFormation::Stack
    DependsOn: ConsulNameSpace
    Properties:
      Parameters:
        ClusterName: !Ref ClusterName
        KubernetesNameSpace: !Ref KubernetesNameSpace
        ConsulVersion: !Ref ConsulVersion
        OIDCProvider: !Sub
          - "${OIDCProvider1}/${OIDCProvider2}/${OIDCProvider3}"
          - OIDCProvider1: !Select [ 2, !Split [ "/", !Ref GetOIDCProvider ] ]
            OIDCProvider2: !Select [ 3, !Split [ "/", !Ref GetOIDCProvider ] ]
            OIDCProvider3: !Select [ 4, !Split [ "/", !Ref GetOIDCProvider ] ]
        GossipScriptURL: !Sub
        - s3://${S3Bucket}/${QSS3KeyPrefix}scripts/generate_gossip_secrets.sh
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      TemplateURL: !Sub
      - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/quickstart-eks-hashicorp-consul-prework.template.yml'
      - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
        S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  ACMCertificate:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - W9196
            - W9197
            - W9198
            - W9199
    Type: AWS::CloudFormation::Stack
    Condition: CreateDns
    Properties:
      TemplateURL:
        !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-aws-acm-certificate/templates/quickstart-aws-acm-certificate.template.yml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix: !Sub ${QSS3KeyPrefix}submodules/quickstart-aws-acm-certificate/
        DomainName: !Ref DomainName
        HostedZoneID: !Ref HostedZoneID
  #Custom resource to fetch LoadBalancer Cannonical DNS name
  GetOIDCProvider:
    Type: Custom::GetOIDCProvider
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-quickstart-ResourceReader"
      AwsCliCommand: !Sub "eks describe-cluster --name ${ClusterName} --query 'cluster.identity.oidc.{issuer:issuer}'"
      IdField: 'issuer'
  GetELBDetail:
    DependsOn: ConsulHelmChart
    Type: AWSQS::Kubernetes::Get
    Properties:
      ClusterName: !Ref "ClusterName"
      Name: !Sub "service/${HelmDeploymentName}-ui"
      Namespace: !Ref "KubernetesNameSpace"
      JsonPath: "{.status.loadBalancer.ingress[0].hostname}"
  # Fetch the Key for the Kubernetes Secret Containing the CA Cert
  KubeGetCaCertSecretKey:
    DependsOn: PreworkStack
    Type: AWSQS::Kubernetes::Get
    Properties:
      ClusterName: !Ref "ClusterName"
      Name: "secret/consul-ca-cert"
      Namespace: !Ref "KubernetesNameSpace"
      JsonPath: "{.data.tls.crt}"
  # Fetch the Key for the Kubernetes Secret Containing the CA Key
  KubeGetCaKeySecretKey:
    DependsOn: PreworkStack
    Type: AWSQS::Kubernetes::Get
    Properties:
      ClusterName: !Ref "ClusterName"
      Name: "secret/consul-ca-key"
      Namespace: !Ref "KubernetesNameSpace"
      JsonPath: "{.data.tls.key}"
  GetELBHostedZone:
    Type: Custom::GetELBHostedZone
    DependsOn: ConsulHelmChart
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:eks-quickstart-ResourceReader"
      AwsCliCommand: !Sub
        - "elb describe-load-balancers --load-balancer-names ${elbname} --query 'LoadBalancerDescriptions[0].{HostedZoneId:CanonicalHostedZoneNameID}'"
        - elbname: !Select [ 0, !Split ["-", !Sub "${GetELBDetail.Response}" ] ]
      IdField: 'HostedZoneId'
  ELBDNSRecord:
    Condition: CreateDns
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: !Ref "DomainName"
      AliasTarget:
        HostedZoneId: !Ref "GetELBHostedZone"
        DNSName: !Sub "${GetELBDetail.Response}"
      HostedZoneId: !Ref "HostedZoneID"
  ConsulHelmChart:
    Type: "AWSQS::Kubernetes::Helm"
    DependsOn: PreworkStack
    Properties:
      ClusterID: !Ref ClusterName
      Repository: https://helm.releases.hashicorp.com
      Namespace: !Ref KubernetesNameSpace
      Chart: hashicorp/consul
      ValueYaml: !Sub
      - |
        global:
          datacenter: "${AWS::Region}"

          gossipEncryption:
            secretName: "consul-gossip-encryption-key"
            secretKey: "key"

          enablePodSecurityPolicies: true

          tls:
            enabled: true
            enableAutoEncrypt: true
            ${DNSSAN}

            verify: true
            httpsOnly: true

            caCert:
              secretName: "consul-ca-cert"
              secretKey: "tls.crt"
            caKey:
              secretName: "consul-ca-key"
              secretKey: "tls.key"

          federation:
            enabled: true
            createFederationSecret: true
        server:
          replicas: ${ConsulReplicas}
          bootstrapExpect: ${ConsulReplicas}
          extraConfig: |
            {
              "log_level": "WARN"
            }
        client:
          enabled: true
          grpc: true
          extraConfig: |
            {
              "log_level": "WARN"
            }
        ui:
          enabled: "true"
          service:
            enabled: true
            type: "LoadBalancer"
            annotations: |
              service.beta.kubernetes.io/aws-load-balancer-ssl-cert: ${SSLCertificate}
              service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
              service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
              ${IsInternalLoadBalancer}
              ${TTL}
              ${ExternalName}
        syncCatalog:
          enabled: true
          default: true
          k8sPrefix: k8s
          k8sAllowNamespaces: ["*"]
          k8sDenyNamespaces: []

          consulNamespaces:
            consulDestinationNamespace: "default"
            mirroringK8S: false
            mirroringK8SPrefix: ""

          addK8SNamespaceSuffix: true
          consulPrefix: consul
          k8sTag: k8s
          syncClusterIPServices: true

          logLevel: warn

        connectInject:
          enabled: true
          image: hashicorp/consul-k8s # image for consul-k8s that contains the injector
          default: true # true will inject by default, otherwise requires annotation
          imageEnvoy: envoyproxy/envoy-alpine
          consulNamespaces:
            consulDestinationNamespace: "default"
            mirroringK8S: false
            mirroringK8SPrefix: ""
          certs:
            # secretName: null
            caBundle: ""
            certName: tls.crt
            keyName: tls.key

          aclBindingRuleSelector: "serviceaccount.name!=default"

          overrideAuthMethodName: ""

        meshGateway:
          enabled: true
          globalMode: local
          replicas: ${ConsulReplicas}

          wanAddress:
            source: "Service"
            port: 443
          service:
            enabled: true

      - SSLCertificate: !If [ CreateDns, !GetAtt "ACMCertificate.Outputs.ACMCertificate", !Ref "ACMSSLCertificateArn" ]
        IsInternalLoadBalancer: !If [ InternalLoadBalancer , 'service.beta.kubernetes.io/aws-load-balancer-internal: "true"', "" ]
        DNSSAN: !If [ CreateDns, !Sub "serverAdditionalDNSSANs: ['${DomainName}']", ""]
        ExternalName: !If [ CreateDns, !Sub '"external-dns.alpha.kubernetes.io/hostname": "${DomainName}"', "" ]
        NameSpace: !Ref KubernetesNameSpace
        TTL: '"external-dns.alpha.kubernetes.io/ttl": "30"'
Outputs:
  ConsulReleaseName:
    Value: !Ref ConsulHelmChart
    Description: "Helm release name of Consul deployment."
  ELBUrl:
    Value:
      !Sub
      - "https://${DNSAddress}/"
      - DNSAddress: !If [ CustomDns, !Ref DomainName, !Sub "${GetELBDetail.Response}" ]
    Description: "Consul UI URL"
AWSTemplateFormatVersion: "2010-09-09"
Description: "Deploys the Hashicorp Consul helm chart into a Kubernetes cluster (qp-1qmcrhdml)"
Metadata:
  QSLint:
    Exclusions: [W9002, W9003, W9004, W9006]
Parameters:
  ClusterName:
    Type: String
    Description: Amazon EKS Cluster
  ConsulVersion:
    Type: String
    Default: "1.7.2"
    AllowedValues: 
    - "1.7.2"
  ConsulReplicas:
    Type: String
    Default: "3"
    AllowedValues:
    - "3"
    - "5"
    - "7"
  KubernetesNameSpace:
    Type: String
    Default: "default"
  OIDCProvider:
    Type: String
    Description: Amazon EKS cluster OIDC provider. (Without the protocol e.g. oidc.eks.us-east-1.amazonaws.com/id/SADFASFFASFXCCVXCVSDFSDF)
  LoadBalancerType:
    Type: String
    Default: "Internal"
    Description: Specify if the load balancer for HashiCorp Vault is internal or external.
    AllowedValues:
    - "Internal"
    - "External"
  DomainName:
    Type: String
    Description: Fully qualified domain name for the HashiCorp Vault load balancer.
      If you don't provide a value for ACMSSLCertificateArn, use the HostedZoneID.
    MaxLength: 128
    Default: ""
  HostedZoneID:
    Type: String
    Description: Route 53-hosted zone ID of the domain name. If you don't provide an ACMSSLCertificateArn value, the Quick Start creates the ACM certificate for you using HostedZoneID in conjunction with DomainName.
    Default: ""
  ACMSSLCertificateArn:
    Description: Amazon Resource Name (ARN) of the load balancer's SSL certificate. If you don't provide values for DomainName and HostedZoneID, provide a value for ACMSSLCertificateArn.
    Type: String
    Default: ""
  QSS3BucketName:
    Type: String
    Default: "aws-quickstart"
  QSS3BucketRegion:
    Type: String
    Default: "us-east-1"
  QSS3KeyPrefix:
    Type: String
    Default: "quickstart-eks-hashicorp-consul/"
Conditions:
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  InternalLoadBalancer: !Equals [!Ref LoadBalancerType, 'Internal']
  CustomDns: !Not [!Equals [!Ref DomainName, '']]
  HostedZoneExists: !Not [!Equals [!Ref HostedZoneID, '']]
  CreateDns: !And
    - !Not
      - !Equals
        - !Ref 'HostedZoneID'
        - ''
    - !Not
      - !Equals
        - !Ref 'DomainName'
        - ''
Resources:
  PreworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        ClusterName: !Ref ClusterName
        KubernetesNameSpace: default
        OIDCProvider: !Ref OIDCProvider
        GossipScriptURL: !Sub
        - s3://${S3Bucket}/${QSS3KeyPrefix}scripts/generate_gossip_secrets.sh
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      TemplateURL: !Sub
      - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/quickstart-eks-hashicorp-consul-prework.template.yml'
      - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
        S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
  ACMCertificate:
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
          - W9196
          - W9197
          - W9198
          - W9199
    Type: AWS::CloudFormation::Stack
    Condition: CreateDns
    Properties:
      TemplateURL:
        !Sub
          - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}submodules/quickstart-aws-acm-certificate/templates/quickstart-aws-acm-certificate.template.yml'
          - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
            S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        QSS3BucketName: !Ref QSS3BucketName
        QSS3BucketRegion: !Ref QSS3BucketRegion
        QSS3KeyPrefix: !Ref QSS3KeyPrefix
        DomainName: !Ref DomainName
        HostedZoneID: !Ref HostedZoneID
#  ELBDNSRecord:
#    Condition: CreateDns
#    Type: AWS::Route53::RecordSet
#    Properties:
#      Type: A
#      Name: !Ref "DomainName"
#      AliasTarget:
#        HostedZoneId: !GetAtt "ConsulLoadBalancer.CanonicalHostedZoneNameID"
#        DNSName: !GetAtt "GetELBDetail.name"
#      HostedZoneId: !Ref "HostedZoneID"
  #Custom resource to fetch LoadBalancer Cannonical DNS name
  GetELBDetail:
    DependsOn: ConsulHelmChart
    Type: "Custom::GetELBDetail"
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeGet-${ClusterName}"
      ClusterName: !Ref "ClusterName"
      Name: "service/consul-consul-ui"
      Namespace: !Ref "KubernetesNameSpace"
      JsonPath: "{.status.loadBalancer.ingress[0].hostname}"
  # Fetch the Key for the Kubernetes Secret Containing the CA Cert
  KubeGetCaCertSecretKey:
    DependsOn: PreworkStack
    Type: "Custom::KubeGetCaKeySecretKey"
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeGet-${ClusterName}"
      ClusterName: !Ref "ClusterName"
      Name: "secret/consul-ca-cert"
      Namespace: !Ref "KubernetesNameSpace"
      JsonPath: "{.data.tls.crt}"
  # Fetch the Key for the Kubernetes Secret Containing the CA Key
  KubeGetCaKeySecretKey:
    DependsOn: PreworkStack
    Type: "Custom::KubeGetCaCertSecretKey"
    Properties:
      ServiceToken: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:EKS-QuickStart-KubeGet-${ClusterName}"
      ClusterName: !Ref "ClusterName"
      Name: "secret/consul-ca-key"
      Namespace: !Ref "KubernetesNameSpace"
      JsonPath: "{.data.tls.key}"
  ConsulHelmChart:
    Type: "AWSQS::Kubernetes::Helm"
    Properties:
      ClusterID: !Ref ClusterName
      Repository: https://helm.releases.hashicorp.com
      Namespace: !Ref KubernetesNameSpace
      Name: "consul"
      Chart: hashicorp/consul
      Values:
        global:
          name: "consul"
          # image: "consul:1.8.0-beta2"
          # imageK8S: "hashicorp/consul-k8s:0.15.0"
          datacenter: !Sub "{AWS::Region}"

          gossipEncryption:
            secretName: "consul-gossip-encryption-key"
            secretKey: "key"

          tls:
#            serverAdditionalDNSSANs: "" # TODO: [{{ Inject from Customer }}]
            caCert:
              secretName: "consul-ca-cert"
              secretKey: !Sub "${KubeGetCaCertSecretKey}" # TODO: "Fetch via KubeGet"
            caKey:
              secretName: "consul-ca-key"
              secretKey: !Sub "${KubeGetCaKeySecretKey}" # TODO: "Fetch via KubeGet"

          # Settings related to federating with another Consul datacenter.
          federation:
            enabled: true
            createFederationSecret: true

        # Server, when enabled, configures a server cluster to run. This should
        # be disabled if you plan on connecting to a Consul cluster external to
        # the Kube cluster.
        server:
          replicas: !Ref "ConsulReplicas"
          bootstrapExpect: !Ref "ConsulReplicas"

          #enterpriseLicense:
          #  secretName: {{>>>> input from customer}}
          #  secretKey: {{>>>> input from customer}}

          storage: 10Gi
          storageClass: |
            null

          extraConfig: |
            {
              "log_level": "WARN"
            }

        client:
          enabled: true
          grpc: true
          extraConfig: |
            {
              "log_level": "WARN"
            }
        dns:
          enabled: "-"
          #clusterIP: true null # TODO: {{ Andrew to consult on DNS configs - by default Consul looks up to 127.0.0.1 }}
          #annotations: null
        ui:
          enabled: "true"
          service:
            enabled: true
            type: "LoadBalancer"
            # https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
            annotations:
              service.beta.kubernetes.io/aws-load-balancer-ssl-cert: !If [ CreateDns,!Sub "ACMCertificate", !Ref "ACMSSLCertificateArn" ]
              service.beta.kubernetes.io/aws-load-balancer-internal: !If [ InternalLoadBalancer , "true", "false" ]
            # service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https|http|ssl|tcp)

        syncCatalog:
          enabled: true
          #image: null
          default: true # true will sync by default, otherwise requires annotation
          k8sPrefix: k8s # TODO: {{ CFN Custom Prefix }}
          k8sAllowNamespaces: ["*"] # TODO: "{{ CFN Custom Namespaces}}"]
          k8sDenyNamespaces: [] # TODO: "{{ CFN Custom Namespaces}}"]

          consulNamespaces:
            # consulDestinationNamespace is the name of the Consul namespace to register all
            # k8s services into. If the Consul namespace does not already exist,
            # it will be created. This will be ignored if `mirroringK8S` is true.
            consulDestinationNamespace: "default"

            # mirroringK8S causes k8s services to be registered into a Consul namespace
            # of the same name as their k8s namespace, optionally prefixed if
            # `mirroringK8SPrefix` is set below. If the Consul namespace does not
            # already exist, it will be created. Turning this on overrides the
            # `consulDestinationNamespace` setting.
            # `addK8SNamespaceSuffix` may no longer be needed if enabling this option.
            mirroringK8S: false

            # If `mirroringK8S` is set to true, `mirroringK8SPrefix` allows each Consul namespace
            # to be given a prefix. For example, if `mirroringK8SPrefix` is set to "k8s-", a
            # service in the k8s `staging` namespace will be registered into the
            # `k8s-staging` Consul namespace.
            mirroringK8SPrefix: ""

          # addK8SNamespaceSuffix appends Kubernetes namespace suffix to
          # each service name synced to Consul, separated by a dash.
          # For example, for a service 'foo' in the default namespace,
          # the sync process will create a Consul service named 'foo-default'.
          # Set this flag to true to avoid registering services with the same name
          # but in different namespaces as instances for the same Consul service.
          # Namespace suffix is not added if 'annotationServiceName' is provided.
          addK8SNamespaceSuffix: true

          # consulPrefix is the service prefix which prepends itself
          # to Kubernetes services registered within Consul
          # For example, "k8s-" will register all services prepended with "k8s-".
          # (Kubernetes -> Consul sync)
          # consulPrefix is ignored when 'annotationServiceName' is provided.
          # NOTE: Updating this property to a non-null value for an existing installation will result in deregistering
          # of existing services in Consul and registering them with a new name.
          consulPrefix: consul # TODO: {{ CFN Custom Prefix }}

          # k8sTag is an optional tag that is applied to all of the Kubernetes services
          # that are synced into Consul. If nothing is set, defaults to "k8s".
          # (Kubernetes -> Consul sync)
          k8sTag: k8s # TODO: {{ CFN Custom Tag }}

          # syncClusterIPServices syncs services of the ClusterIP type, which may
          # or may not be broadly accessible depending on your Kubernetes cluster.
          # Set this to false to skip syncing ClusterIP services.
          syncClusterIPServices: true

          # Log verbosity level. One of "trace", "debug", "info", "warn", or "error".
          logLevel: warn

        # ConnectInject will enable the automatic Connect sidecar injector.
        connectInject:
          enabled: true
          image: hashicorp/consul-k8s # image for consul-k8s that contains the injector
          default: true # true will inject by default, otherwise requires annotation
          imageEnvoy: envoyproxy/envoy-alpine
          k8sAllowNamespaces: ["*"]

          k8sDenyNamespaces: []
          consulNamespaces:
            consulDestinationNamespace: "default"
            mirroringK8S: false
            mirroringK8SPrefix: ""
          certs:
            # secretName: null
            caBundle: ""
            certName: tls.crt
            keyName: tls.key

          # nodeSelector: null

          aclBindingRuleSelector: "serviceaccount.name!=default"

          overrideAuthMethodName: ""
          # aclInjectToken:
            # secretName: null
            # secretKey: null

          # Requires Consul >= v1.5 and consul-k8s >= v0.8.1.
          centralConfig:
            # enabled controls whether central config is enabled on all servers and clients.
            # See https://www.consul.io/docs/agent/options.html#enable_central_service_config.
            # If changing this after installation, servers and clients must be restarted
            # for the change to take effect.
            enabled: true

            # defaultProtocol allows you to specify a convenience default protocol if
            # most of your services are of the same protocol type. The individual annotation
            # on any given pod will override this value.
            # Valid values are "http", "http2", "grpc" and "tcp".
            defaultProtocol: |
              null

            # proxyDefaults is a raw json string that will be written as the value of
            # the "config" key of the global proxy-defaults config entry.
            # See: https://www.consul.io/docs/agent/config-entries/proxy-defaults.html
            # NOTE: Changes to this value after the chart is first installed have *no*
            # effect. In order to change the proxy-defaults config after installation,
            # you must use the Consul API.
            proxyDefaults: |
              {}

        meshGateway:
          enabled: true
          globalMode: local

          # Number of replicas for the Deployment.
          replicas: !Ref "ConsulReplicas"

          # What gets registered as WAN address for the gateway.
          wanAddress:
            source: "Service"
            port: 443

            # If source is set to "Static" then this value will be used as the WAN
            # address of the mesh gateways. This is useful if you've configured a
            # DNS entry to point to your mesh gateways.
            static: "" # {{>>>> For customer: "" }}

          # The service option configures the Service that fronts the Gateway Deployment.
          service:
            # Whether to create a Service or not.
            enabled: true

            # Type of service, ex. LoadBalancer, ClusterIP.
            type: ClusterIP # {{ TODO: >>> Andrew changes for AWS ELB }}
            port: 443

            annotations: |
              null
            # TODO: {{ >>> Andrew annotation changes for AWS ELB }}

          resources:
            requests:
              memory: "128Mi"
              cpu: "250m"
            limits:
              memory: "256Mi"
              cpu: "500m"
Outputs:
  ConsulReleaseName:
    Value: !Ref ConsulHelmChart
    Description: "Helm release name of Consul deployment."
  ELBUrl:
    Value: !Ref GetELBDetail
    Description: "Consul UI URL"


